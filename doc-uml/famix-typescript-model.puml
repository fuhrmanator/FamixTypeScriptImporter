@startuml
class Entity extends FamixBaseElement {
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
}
class SourceLanguage extends Entity {
    -_sourcedEntities: Set<SourcedEntity>
    +name: string
    +addSourcedEntity(sourcedEntity: SourcedEntity): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +sourcedEntities: Set<SourcedEntity>
}
class Comment extends SourcedEntity {
    -_isJSDoc: boolean
    -_container: SourcedEntity
    -_content: string
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +isJSDoc: boolean
    +isJSDoc: boolean
    +container: SourcedEntity
    +container: SourcedEntity
    +content: string
    +content: string
}
class SourceAnchor extends Entity {
    -_element: SourcedEntity
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +element: SourcedEntity
    +element: SourcedEntity
}
class SourcedEntity extends Entity {
    -_isStub: boolean
    -_sourceAnchor: SourceAnchor
    -_comments: Set<Comment>
    +addComment(comment: Comment): void
    -_declaredSourceLanguage: SourceLanguage
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +isStub: boolean
    +isStub: boolean
    +sourceAnchor: SourceAnchor
    +sourceAnchor: SourceAnchor
    +comments: Set<Comment>
    +declaredSourceLanguage: SourceLanguage
    +declaredSourceLanguage: SourceLanguage
}
class ScopingEntity extends ContainerEntity {
    -_modules: Set<Module>
    +addModule(childModule: Module): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +modules: Set<Module>
}
class ScriptEntity extends ScopingEntity {
    -_numberOfLinesOfText: number
    -_numberOfCharacters: number
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +numberOfLinesOfText: number
    +numberOfLinesOfText: number
    +numberOfCharacters: number
    +numberOfCharacters: number
}
class Module extends ScriptEntity {
    +isAmbient: boolean
    +isAmbient: boolean
    -_isAmbient: boolean
    +isNamespace: boolean
    +isNamespace: boolean
    -_isNamespace: boolean
    +isModule: boolean
    +isModule: boolean
    -_isModule: boolean
    -_parentScope: ScopingEntity
    -_outgoingImports: Set<ImportClause>
    +addOutgoingImport(importClause: ImportClause): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +parentScope: ScopingEntity
    +parentScope: ScopingEntity
    +outgoingImports: Set<ImportClause>
}
class ImportClause extends Entity {
    -_importingEntity: Module
    -_importedEntity: NamedEntity
    -_moduleSpecifier: string
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +importingEntity: Module
    +importingEntity: Module
    +importedEntity: NamedEntity
    +importedEntity: NamedEntity
    +moduleSpecifier: string
    +moduleSpecifier: string
}
class Alias extends NamedEntity {
    -_parentEntity: NamedEntity
    -_aliasedEntity: Type
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +parentEntity: NamedEntity
    +parentEntity: NamedEntity
    +aliasedEntity: Type
    +aliasedEntity: Type
}
class Decorator extends NamedEntity {
    -_decoratorExpression: string
    -_decoratedEntity: NamedEntity
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +decoratorExpression: string
    +decoratorExpression: string
    +decoratedEntity: NamedEntity
    +decoratedEntity: NamedEntity
}
class NamedEntity extends SourcedEntity {
    -_fullyQualifiedName: string
    -_receivedInvocations: Set<Invocation>
    +addReceivedInvocation(receivedInvocation: Invocation): void
    -_incomingImports: Set<ImportClause>
    +addIncomingImport(anImport: ImportClause): void
    -_name: string
    -_aliases: Set<Alias>
    +addAlias(alias: Alias): void
    -_decorators: Set<Decorator>
    +addDecorator(decorator: Decorator): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +fullyQualifiedName: string
    +fullyQualifiedName: string
    +receivedInvocations: Set<Invocation>
    +incomingImports: Set<ImportClause>
    +name: string
    +name: string
    +aliases: Set<Alias>
    +decorators: Set<Decorator>
}
class Parameter extends StructuralEntity {
    -_parentEntity: BehavioralEntity
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +parentEntity: BehavioralEntity
    +parentEntity: BehavioralEntity
}
class Property extends StructuralEntity {
    -_isClassSide: boolean
    +readOnly: boolean
    +readOnly: boolean
    -_readOnly: boolean
    -_parentEntity: Class | Interface
    +isDefinitelyAssigned: boolean
    +isDefinitelyAssigned: boolean
    +isOptional: boolean
    +isOptional: boolean
    +isJavaScriptPrivate: boolean
    +isJavaScriptPrivate: boolean
    -_isDefinitelyAssigned: boolean
    -_isOptional: boolean
    -_isJavaScriptPrivate: boolean
    +visibility: VisibilityTypes
    +visibility: VisibilityTypes
    -_visibility: VisibilityTypes
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +isClassSide: boolean
    +isClassSide: boolean
    +parentEntity: Class | Interface
    +parentEntity: Class | Interface
}
class Inheritance extends Entity {
    -_superclass: Class | Interface
    -_subclass: Class | Interface
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +superclass: Class | Interface
    +superclass: Class | Interface
    +subclass: Class | Interface
    +subclass: Class | Interface
}
class Class extends Type {
    -_isAbstract: boolean
    -_properties: Set<Property>
    +addProperty(property: Property): void
    -_methods: Set<Method>
    +addMethod(method: Method): void
    -_superInheritances: Set<Inheritance>
    +addSuperInheritance(superInheritance: Inheritance): void
    -_subInheritances: Set<Inheritance>
    +addSubInheritance(subInheritance: Inheritance): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +isAbstract: boolean
    +isAbstract: boolean
    +properties: Set<Property>
    +methods: Set<Method>
    +superInheritances: Set<Inheritance>
    +subInheritances: Set<Inheritance>
}
class Method extends BehavioralEntity {
    -_parentEntity: Class | Interface
    -_kind: string
    -_isAbstract: boolean
    -_isClassSide: boolean
    -_isPrivate: boolean
    -_isPublic: boolean
    -_isProtected: boolean
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +parentEntity: Class | Interface
    +parentEntity: Class | Interface
    +kind: string
    +kind: string
    +isAbstract: boolean
    +isAbstract: boolean
    +isClassSide: boolean
    +isClassSide: boolean
    +isPrivate: boolean
    +isPrivate: boolean
    +isPublic: boolean
    +isPublic: boolean
    +isProtected: boolean
    +isProtected: boolean
}
class Interface extends Type {
    -_properties: Set<Property>
    +addProperty(property: Property): void
    -_methods: Set<Method>
    +addMethod(method: Method): void
    -_superInheritances: Set<Inheritance>
    +addSuperInheritance(superInheritance: Inheritance): void
    -_subInheritances: Set<Inheritance>
    +addSubInheritance(subInheritance: Inheritance): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +properties: Set<Property>
    +methods: Set<Method>
    +superInheritances: Set<Inheritance>
    +subInheritances: Set<Inheritance>
}
class PrimitiveType extends Type {
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
}
class ParametricClass extends Class {
    -_genericParameters: Set<ParameterType>
    +addGenericParameter(genericParameter: ParameterType): void
    +clearGenericParameters(): void
    -_concreteParameters: Set<Class | Interface | PrimitiveType>
    +addConcreteParameter(concreteParameter: Class | Interface | PrimitiveType): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +genericParameters: Set<ParameterType>
    +concreteParameters: Set<Class | Interface | PrimitiveType>
}
class ParametricInterface extends Interface {
    -_genericParameters: Set<ParameterType>
    +addGenericParameter(genericParameter: ParameterType): void
    +clearGenericParameters(): void
    -_concreteParameters: Set<Class | Interface | PrimitiveType>
    +addConcreteParameter(concreteParameter: Class | Interface | PrimitiveType): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +genericParameters: Set<ParameterType>
    +concreteParameters: Set<Class | Interface | PrimitiveType>
}
class Function extends BehavioralEntity {
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
}
class Accessor extends Method {
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
}
class ParametricMethod extends Method {
    -_concreteParameters: Set<Class | Interface | PrimitiveType>
    +addConcreteParameter(concreteParameter: Class | Interface | PrimitiveType): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +concreteParameters: Set<Class | Interface | PrimitiveType>
}
class ParametricFunction extends Function {
    -_concreteParameters: Set<Class | Interface | PrimitiveType>
    +addConcreteParameter(concreteParameter: Class | Interface | PrimitiveType): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +concreteParameters: Set<Class | Interface | PrimitiveType>
}
class ArrowFunction extends BehavioralEntity {
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
}
class ParametricArrowFunction extends ArrowFunction {
    -_concreteParameters: Set<Class | Interface | PrimitiveType>
    +addConcreteParameter(concreteParameter: Class | Interface | PrimitiveType): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +concreteParameters: Set<Class | Interface | PrimitiveType>
}
class ParameterType extends Type {
    -_parentGeneric: Method | ParametricArrowFunction | ArrowFunction | ParametricClass | ParametricInterface | ParametricMethod | Accessor | FamixFunction | ParametricFunction
    -_baseType: Type
    -_arguments: Set<Type>
    +addArgument(argument: Type): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +parentGeneric: Method | ParametricArrowFunction | ArrowFunction | ParametricClass | ParametricInterface | ParametricMethod | Accessor | FamixFunction | ParametricFunction
    +parentGeneric: Method | ParametricArrowFunction | ArrowFunction | ParametricClass | ParametricInterface | ParametricMethod | Accessor | FamixFunction | ParametricFunction
    +baseType: Type
    +baseType: Type
    +arguments: Set<Type>
}
class BehavioralEntity extends ContainerEntity {
    -_signature: string
    -_parameters: Set<Parameter>
    +addParameter(parameter: Parameter): void
    -_numberOfParameters: number
    -_incomingInvocations: Set<Invocation>
    +addIncomingInvocation(incomingInvocation: Invocation): void
    -_declaredType: Type
    -_genericParameters: Set<ParameterType>
    +addGenericParameter(genericParameter: ParameterType): void
    +clearGenericParameters(): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +signature: string
    +signature: string
    +parameters: Set<Parameter>
    +numberOfParameters: number
    +numberOfParameters: number
    +incomingInvocations: Set<Invocation>
    +declaredType: Type
    +declaredType: Type
    +genericParameters: Set<ParameterType>
}
class Invocation extends Entity {
    -_candidates: Set<BehavioralEntity>
    +addCandidate(candidate: BehavioralEntity): void
    -_receiver: NamedEntity
    -_sender: ContainerEntity
    -_signature: string
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +candidates: Set<BehavioralEntity>
    +receiver: NamedEntity
    +receiver: NamedEntity
    +sender: ContainerEntity
    +sender: ContainerEntity
    +signature: string
    +signature: string
}
class Reference extends Entity {
    -_source: ContainerEntity
    -_target: Type
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +source: ContainerEntity
    +source: ContainerEntity
    +target: Type
    +target: Type
}
class Variable extends StructuralEntity {
    -_parentContainerEntity: ContainerEntity
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +parentContainerEntity: ContainerEntity
    +parentContainerEntity: ContainerEntity
}
class ContainerEntity extends NamedEntity {
    -_parentContainerEntity: ContainerEntity
    -_childrenContainerEntities: Set<ContainerEntity>
    +addChildContainerEntity(childContainerEntity: ContainerEntity): void
    -_cyclomaticComplexity: number
    -_numberOfStatements: number
    -_outgoingReferences: Set<Reference>
    +addOutgoingReference(outgoingReference: Reference): void
    -_numberOfLinesOfCode: number
    -_outgoingInvocations: Set<Invocation>
    +addOutgoingInvocation(outgoingInvocation: Invocation): void
    -_accesses: Set<Access>
    +addAccess(access: Access): void
    -childrenTypes: Set<Type>
    +addType(childType: Type): void
    -childrenFunctions: Set<FamixFunctionEntity>
    +addFunction(childFunction: FamixFunctionEntity): void
    -_variables: Set<Variable>
    +addVariable(variable: Variable): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +parentContainerEntity: ContainerEntity
    +parentContainerEntity: ContainerEntity
    +childrenContainerEntities: Set<ContainerEntity>
    +cyclomaticComplexity: number
    +cyclomaticComplexity: number
    +numberOfStatements: number
    +numberOfStatements: number
    +outgoingReferences: Set<Reference>
    +numberOfLinesOfCode: number
    +numberOfLinesOfCode: number
    +outgoingInvocations: Set<Invocation>
    +accesses: Set<Access>
    +types: Set<Type>
    +functions: Set<FamixFunctionEntity>
    +variables: Set<Variable>
}
class Type extends ContainerEntity {
    -_container: ContainerEntity
    -_typeAliases: Set<Alias>
    +addTypeAlias(typeAlias: Alias): void
    -_structuresWithDeclaredType: Set<StructuralEntity>
    +addStructureWithDeclaredType(structureWithDeclaredType: StructuralEntity): void
    -_behavioralEntitiesWithDeclaredType: Set<BehavioralEntity>
    +addBehavioralEntityWithDeclaredType(behavioralEntityWithDeclaredType: BehavioralEntity): void
    -_incomingReferences: Set<Reference>
    +addIncomingReference(incomingReference: Reference): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +container: ContainerEntity
    +container: ContainerEntity
    +typeAliases: Set<Alias>
    +structuresWithDeclaredType: Set<StructuralEntity>
    +behavioralEntitiesWithDeclaredType: Set<BehavioralEntity>
    +incomingReferences: Set<Reference>
}
class StructuralEntity extends NamedEntity {
    -_incomingAccesses: Set<Access>
    +addIncomingAccess(incomingAccess: Access): void
    -_declaredType: Type
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +incomingAccesses: Set<Access>
    +declaredType: Type
    +declaredType: Type
}
class Access extends Entity {
    -_accessor: ContainerEntity
    -_variable: StructuralEntity
    -_isWrite: boolean
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +accessor: ContainerEntity
    +accessor: ContainerEntity
    +variable: StructuralEntity
    +variable: StructuralEntity
    +isWrite: boolean
    +isWrite: boolean
}
class Concretisation extends Entity {
    -_genericEntity: ParametricClass | ParametricInterface | ParametricMethod | ParametricFunction
    -_concreteEntity: ParametricClass | ParametricInterface | ParametricMethod | ParametricFunction
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +genericEntity: ParametricClass | ParametricInterface | ParametricMethod | ParametricFunction
    +genericEntity: ParametricClass | ParametricInterface | ParametricMethod | ParametricFunction
    +concreteEntity: ParametricClass | ParametricInterface | ParametricMethod | ParametricFunction
    +concreteEntity: ParametricClass | ParametricInterface | ParametricMethod | ParametricFunction
}
class Enum extends Type {
    -_values: Set<EnumValue>
    +addValue(value: EnumValue): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +values: Set<EnumValue>
}
class EnumValue extends StructuralEntity {
    -_parentEntity: Enum
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +parentEntity: Enum
    +parentEntity: Enum
}
class IndexedFileAnchor extends SourceAnchor {
    -_startPos: number
    -_endPos: number
    -_fileName: string
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +startPos: number
    +startPos: number
    +endPos: number
    +endPos: number
    +fileName: string
    +fileName: string
}
class ParameterConcretisation extends Entity {
    -_genericParameter: ParameterType
    -_concreteParameter: PrimitiveType
    -_concretisations: Set<Concretisation>
    +addConcretisation(concretisation: Concretisation): void
    +getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
    +genericParameter: ParameterType
    +genericParameter: ParameterType
    +concreteParameter: PrimitiveType
    +concreteParameter: PrimitiveType
    +concretisations: Set<Concretisation>
}
interface SearchParameters {
    +searchArray: string[]
    +targetArray: string[]
    +start?: number
}
class EntityDictionary {
    +famixRep: FamixRepository
    -fmxAliasMap: Map<string, Famix.Alias>
    -fmxClassMap: Map<string, Famix.Class | Famix.ParametricClass>
    -fmxInterfaceMap: Map<string, Famix.Interface | Famix.ParametricInterface>
    -fmxModuleMap: Map<string, Famix.Module>
    -fmxFileMap: Map<string, Famix.Module | Famix.ScriptEntity>
    -fmxTypeMap: Map<string, Famix.Type | Famix.ParameterType | Famix.PrimitiveType>
    -fmxFunctionAndMethodMap: Map<string, Famix.Method | Famix.ParametricMethod | Famix.Function | Famix.ParametricFunction>
    -UNKNOWN_VALUE: string
    +fmxElementObjectMap: Map<Famix.Entity, TSMorphObjectType>
    +addSourceAnchor(fmx: Famix.SourcedEntity, node: TSMorphObjectType): Famix.IndexedFileAnchor
    +makeFamixIndexFileAnchor(sourceElement: TSMorphObjectType, famixElement: Famix.SourcedEntity): void
    +createOrGetFamixFile(f: SourceFile, isModule: boolean): Famix.Module | Famix.ScriptEntity
    +createOrGetFamixModule(m: ModuleDeclaration): Famix.Module
    +createFamixAlias(a: TypeAliasDeclaration): Famix.Alias
    +createOrGetFamixClass(cls: ClassDeclaration): Famix.Class | Famix.ParametricClass
    +createOrGetFamixInterface(inter: InterfaceDeclaration): Famix.Interface | Famix.ParametricInterface
    +createOrGetFamixConcreteElement(el: Famix.ParametricClass | Famix.ParametricInterface | Famix.ParametricMethod | Famix.ParametricFunction, elDeclaration: ClassDeclaration | InterfaceDeclaration | MethodDeclaration | FunctionDeclaration, concreteArguments: any): Famix.ParametricClass | Famix.ParametricInterface | Famix.ParametricMethod | Famix.ParametricFunction
    +createFamixProperty(property: PropertyDeclaration | PropertySignature): Famix.Property
    +createOrGetFamixMethod(method: MethodDeclaration | ConstructorDeclaration | MethodSignature | GetAccessorDeclaration | SetAccessorDeclaration, currentCC: unknown): Famix.Method | Famix.ParametricMethod | Famix.Accessor
    +createOrGetFamixFunction(func: FunctionDeclaration | FunctionExpression, currentCC: unknown): Famix.Function | Famix.ParametricFunction
    +createFamixParameter(param: ParameterDeclaration): Famix.Parameter
    +createFamixParameterType(tp: TypeParameterDeclaration): Famix.ParameterType
    +createOrGetFamixConcreteType(param: TypeNode<ts.TypeNode>): Famix.Class | Famix.Interface | Famix.ParameterType | Famix.PrimitiveType
    +createFamixVariable(variable: VariableDeclaration): Famix.Variable
    +createFamixEnum(enumEntity: EnumDeclaration): Famix.Enum
    +createFamixEnumValue(enumMember: EnumMember): Famix.EnumValue
    +createOrGetFamixDecorator(decorator: Decorator, decoratedEntity: ClassDeclaration | MethodDeclaration | ParameterDeclaration | PropertyDeclaration | GetAccessorDeclaration | SetAccessorDeclaration): Famix.Decorator
    +createFamixComment(comment: CommentRange, fmxScope: Famix.NamedEntity, isJSDoc: boolean): Famix.Comment
    +createOrGetFamixType(typeName: string, element: TypeDeclaration): Famix.Type | Famix.ParameterType | Famix.PrimitiveType
    +createFamixAccess(node: Identifier, id: number): void
    +createFamixInvocation(node: Identifier, m: MethodDeclaration | ConstructorDeclaration | FunctionDeclaration | FunctionExpression | GetAccessorDeclaration | SetAccessorDeclaration, id: number): void
    +createFamixInheritance(cls: ClassDeclaration | InterfaceDeclaration, inhClass: ClassDeclaration | InterfaceDeclaration | ExpressionWithTypeArguments): void
    +createFamixImportClause(importedEntity: Famix.NamedEntity, importingEntity: Famix.Module): void
    +oldCreateFamixImportClause(importClauseInfo: { importDeclaration?: ImportDeclaration | ImportEqualsDeclaration; importerSourceFile: SourceFile; moduleSpecifierFilePath: string; importElement: ImportSpecifier | Identifier; isInExports: boolean; isDefaultExport: boolean; }): void
    +createFamixArrowFunction(arrowExpression: Expression<ts.Expression>, currentCC: unknown): Famix.ParametricArrowFunction | Famix.ArrowFunction
    +createFamixConcretisation(conEntity: Famix.ParametricClass | Famix.ParametricInterface | Famix.ParametricMethod | Famix.ParametricFunction, genEntity: Famix.ParametricClass | Famix.ParametricInterface | Famix.ParametricMethod | Famix.ParametricFunction): Famix.Concretisation
    +createFamixParameterConcrestisation(concretisation: Famix.Concretisation): Famix.ParameterConcretisation
    +createFamixConcretisationClassOrInterfaceSpecialisation(element: ClassDeclaration | InterfaceDeclaration): void
    +createFamixConcretisationGenericInstantiation(cls: ClassDeclaration): void
    +createFamixConcretisationFunctionInstantiation(element: MethodDeclaration | FunctionDeclaration): void
    +createFamixConcretisationInterfaceClass(cls: ClassDeclaration): void
    +createFamixConcretisationTypeInstanciation(element: ClassDeclaration | InterfaceDeclaration): void
    +convertToRelativePath(absolutePath: string, absolutePathProject: string): string
}
class FamixRepository {
    -elements: Set<FamixBaseElement>
    -famixClasses: Set<Class>
    -famixInterfaces: Set<Interface>
    -famixModules: Set<Module>
    -famixMethods: Set<Method>
    -famixVariables: Set<Variable>
    -famixFunctions: Set<FamixFunctionEntity>
    -famixFiles: Set<Module | ScriptEntity>
    -idCounter: number
    -absolutePath: string
    -fmxElementObjectMap: Map<Famix.Entity, TSMorphObjectType>
    +setFmxElementObjectMap(fmxElementObjectMap: Map<Famix.Entity, TSMorphObjectType>): void
    +getFmxElementObjectMap(): Map<Famix.Entity, TSMorphObjectType>
    +getAbsolutePath(): string
    +setAbsolutePath(path: string): void
    +getFamixEntityById(id: number): FamixBaseElement
    +getFamixEntityByFullyQualifiedName(fullyQualifiedName: string): FamixBaseElement
    +export(arg0: { format: string; }): string
    +_getAllEntities(): Set<FamixBaseElement>
    +_getAllEntitiesWithType(theType: string): Set<FamixBaseElement>
    +_getFamixClass(fullyQualifiedName: string): Class
    +_getFamixInterface(fullyQualifiedName: string): Interface
    +_getFamixMethod(fullyQualifiedName: string): Method
    +_getFamixFunction(fullyQualifiedName: string): FamixFunctionEntity
    +_getFamixVariable(fullyQualifiedName: string): Variable
    +_getFamixModule(fullyQualifiedName: string): Module
    +_getFamixModules(): Set<Module>
    +_getFamixFile(fullyQualifiedName: string): Module | ScriptEntity
    +_getFamixFiles(): Set<Module | ScriptEntity>
    +_methodNamesAsSetFromClass(className: string): Set<string>
    +_methodParentsAsSetFromClass(className: string): Set<Type>
    +_initMapFromModel(model: string): Map<number, unknown>
    +addElement(element: FamixBaseElement): void
    +getJSON(): string
}
class Importer {
    -project: Project
    +famixRepFromPaths(paths: string[]): FamixRepository
    -processEntities(project: any): void
    +famixRepFromSource(filename: string, source: string): FamixRepository
    +famixRepFromProject(project: Project): FamixRepository
}
abstract class FamixBaseElement {
    +id: number
    +{abstract} getJSON(): string
    +addPropertiesToExporter(exporter: FamixJSONExporter): void
}
class FamixJSONExporter {
    -element: FamixBaseElement
    -bufferArray: any
    -FamixPrefix: string
    +addProperty(name: string, prop: unknown): void
    +getJSON(): string
}
@enduml